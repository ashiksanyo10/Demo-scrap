from helium import start_firefox, go_to, write, press, find_all, S, kill_browser
import json
import time
import random

base_url = 'https://www.classification.gov.au'
batch_size = 10  # Number of titles to process in each batch
delay_between_batches = 5  # Delay between batches in seconds

def fetch_movie_details(title):
    # Start the browser and go to the search page
    browser = start_firefox(base_url)
    go_to(f'{base_url}/search/title')

    # Enter the title in the search box and press Enter
    write(title, into='Search for a film, game or publication')
    press(ENTER)

    # Allow some time for the results to load
    time.sleep(5)

    # Find the relevant movie link and click it
    movie_links = find_all(S('.c-classifiction-title__text'))
    for link in movie_links:
        if title.lower() in link.web_element.text.lower():
            link.click()
            break

    # Allow some time for the movie details page to load
    time.sleep(5)

    # Extract the required details from the page
    details = {
        'title': title,
        'is_listed': True,
        'classification_date': S('div.field--name-field-date').web_element.text if S('div.field--name-field-date').exists() else 'N/A',
        'year_of_production': S('div.field--name-field-year-of-production').web_element.text if S('div.field--name-field-year-of-production').exists() else 'N/A',
        'classification': S('div.field--name-field-consumer-advice').web_element.text if S('div.field--name-field-consumer-advice').exists() else 'N/A',
        'category': S('div.field--name-field-category-detail').web_element.text if S('div.field--name-field-category-detail').exists() else 'N/A',
        'duration': S('div.field--name-field-duration').web_element.text if S('div.field--name-field-duration').exists() else 'N/A',
        'producer': S('div.field--name-field-producer').web_element.text if S('div.field--name-field-producer').exists() else 'N/A',
        'director_creator': S('div.field--name-field-director').web_element.text if S('div.field--name-field-director').exists() else 'N/A'
    }

    # Close the browser
    kill_browser()
    return details

def process_titles(titles):
    all_results = []
    for i in range(0, len(titles), batch_size):
        batch = titles[i:i + batch_size]
        batch_results = []
        for title in batch:
            try:
                details = fetch_movie_details(title)
                batch_results.append(details)
                print(f"Fetched details for {title}")
            except Exception as e:
                print(f"Error fetching details for {title}: {e}")
        all_results.extend(batch_results)
        time.sleep(random.uniform(delay_between_batches, delay_between_batches + 5))
    return all_results

def main():
    # Read input JSON file
    with open('input.json', 'r') as f:
        data = json.load(f)
        titles = [item['Title_name'] for item in data['Data']]

    print(f"Checking titles: {titles}")
    results = process_titles(titles)
    print(f"Final results: {results}")

    # Print the results
    print(json.dumps(results, indent=4))

if __name__ == '__main__':
    main()
